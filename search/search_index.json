{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>pspm, as described, is a simple Python package manager. It aims to help developers but without getting in their way</p>"},{"location":"#installation","title":"Installation","text":"<p>The recommend installation method is by using pipx</p> <pre><code>pipx install pspm[uv]\n</code></pre> <p>Note</p> <p>This will install <code>pspm</code> along with <code>uv</code>. You may want to install uv separately and run <code>pipx install pspm</code> instead.</p>"},{"location":"#shell-completion","title":"Shell Completion","text":"<p>pspm supports generating completion scripts for Bash, Fish, and Zsh.</p> <pre><code>spm --install-completion\n</code></pre>"},{"location":"comparisons/","title":"Comparisons","text":""},{"location":"comparisons/#poetry-pdm","title":"<code>Poetry</code>, <code>PDM</code>","text":"<p>Those are great tools, much more powerful than <code>pspm</code>. My problem with those is that they add proprietary configuration in the <code>pyproject.toml</code> and generate proprietary lock files as well. That means they must be installed in the production environment and every developer is obligated to use them.</p>"},{"location":"comparisons/#rye","title":"<code>rye</code>","text":"<p>My favourite of the bunch, <code>pspm</code> was heavily inspired by this project. It adds few proprietary configuration and creates a <code>pip</code> compatible lock file, meaning you don't have to install in production. I just have a few problems with it: every developer still must use it and the lock file includes the current project, meaning installing only the dependencies is a bit of hassle.</p>"},{"location":"comparisons/#pspm","title":"<code>pspm</code>","text":"<p>Does not add any properietary configuration to <code>pyproject.toml</code> and generates a <code>pip</code> compatible lock file. It is faster than the aforementioned <code>Poetry</code>, <code>PDM</code> because it uses <code>uv</code> to manage dependencies<sup>1</sup>. Allows users to use custom initial templates<sup>2</sup>, see <code>Working with Templates</code>. And, has the prettier user interface because it's powered by <code>Typer</code>.</p> <ol> <li> <p>As does <code>rye</code> \u21a9</p> </li> <li> <p>As does <code>PDM</code> \u21a9</p> </li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#why-pspm-doesnt-use-version-constraints-when-adding-dependencies","title":"Why <code>pspm</code> doesn't use version constraints when adding dependencies?","text":"<p>When you're developing a library, it's necessary to support a wide range of versions from your dependencies. Let's suppose that your project depends on a package that is currently in version 4.0.0, it's very likely that everything would work fine with that package in version 3.0.0. What if it didn't? Then set a lower bound in <code>pyproject.toml</code>.</p> <p>But if you're developing an application, you should be using a lock file anyway. So what is the point?</p> <p>Good video on this topic</p>"},{"location":"motivation/","title":"Motivation","text":"<ol> <li>In Python's ecosystem there is no de facto standard package manager, like Cargo for Rust or Go Modules for Go. That's a problem because when you choose a package manager for your Python project you force all the other mantainers to use the same one, with all its strange gimmicks. That's why <code>pspm</code> is designed in a way that if you don't want it, you can just not use it.</li> <li>You don't need a package manager. Python is there since 1991 and just in 2018-2020 those famous package managers like <code>poetry</code>, <code>pdm</code> were created. What you really need is a way of locking your dependencies and for that that are awesome tools like pip-tools and uv. In fact, <code>pspm</code> is just a wrapper for running <code>uv</code> commands but you could as well run those commands mannualy or with <code>pre-commit</code>, <code>CI</code>.</li> </ol> <p>Since you are here, you might as well watch this video from Anthony, creator of pre-commit, pytest, and others. This page is highly inspired by his video.</p>"},{"location":"quick-start/","title":"Quick Start","text":""},{"location":"quick-start/#project-setup","title":"Project Setup","text":"<p>To create a new project use the <code>init</code> command</p> <pre><code>spm init my-project\n</code></pre> <p>The following structure will be created:</p> <pre><code>my-project/\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 my_project\n        \u2514\u2500\u2500 __init__.py\n</code></pre>"},{"location":"quick-start/#dependencies","title":"Dependencies","text":""},{"location":"quick-start/#add","title":"Add","text":"<p>To add dependencies use the <code>add</code> command</p> <pre><code>spm add pandas\n</code></pre>"},{"location":"quick-start/#add-with-group","title":"Add with Group","text":"<p>To add dependencies with group use the <code>--group</code> option</p> <pre><code>spm add -g dev mypy\n</code></pre>"},{"location":"quick-start/#run-command","title":"Run Command","text":"<p>Warning</p> <p>This will only work for binaries installed inside the virtualenv, like your project script</p> <p>To run commands using <code>pspm</code> use the <code>run</code> command. This will automatically read your <code>.env</code> file</p> <pre><code>spm run my-project\n</code></pre>"},{"location":"quick-start/#existing-project","title":"Existing Project","text":"<p>For installing dependencies from a existing project use the <code>sync</code> command. This will install all the dependencies and the package itself</p> <pre><code>spm sync\n</code></pre>"},{"location":"templates/","title":"Working with Templates","text":"<p>Note</p> <p>Sorry, the following bit is not that simple. In fact, <code>pspm</code> bundles with the most powerful template management tool of all package managers.</p> <p><code>PSPM</code> supports initializing a project from a copier template. By default, the command <code>init</code> will use this template, but you can pass your own in the following way:</p> <pre><code>spm init -T gh:Jahn16/pspm-template\n</code></pre> <p>The template option can be a local path, a Git URL, or a shortcut URL (as shown in the example)</p>"},{"location":"templates/#creating-your-own-template","title":"Creating your own template","text":"<p>You can, and should, create your own template. For that you can fork the default template, or create one from scratch. In both cases, I would suggest you to read the copier docs on this topic.</p> <p><code>PSPM</code> will pass some data (retrieved from <code>init</code> cli options) to <code>copier</code> so that the user don't have to fill some information by himself. Those attributes are:</p> <ul> <li><code>project_name</code>: The project name</li> <li><code>package_name</code>: The project name but all lower case and replaced <code>-</code> for <code>_</code> </li> <li><code>is_installable</code>: Whether the project is installable</li> <li><code>author_name</code>, <code>author_email</code>: Fetched from git config</li> </ul> <p>I wold suggest you to use the same attributes in your template, but if you want you might change or create other ones in you <code>copier.yml</code> file. This will cause <code>copier</code> to prompt the user for missing information.</p>"},{"location":"templates/#updating-a-project","title":"Updating a project","text":"<p>Updating a project in very useful if you're adding a new workflow, updating a pre-commit ref, etc. The <code>copier update</code> command will sync your project to the updated template.</p> <p>For that to work you will need to have <code>copier</code> installed and a <code>.copier-answers.yml</code> file. Whether this file is created or not is configured in the template. </p> <p>Warning</p> <p>The default template bundled with <code>pspm</code> does not create an answers file hence updating is not supported. That means you need to use a custom template to use this feature.</p>"},{"location":"commands/add/","title":"<code>add</code>","text":"<p>Adds package to pyproject, installs it and lock version</p>"},{"location":"commands/add/#arguments","title":"Arguments","text":"<ul> <li><code>package</code>: Package to install</li> </ul>"},{"location":"commands/add/#options","title":"Options","text":"<ul> <li><code>-g</code>,<code>--group</code>: The group to add dependency to (it will be inserted in the <code>[project.optional-dependencies.&lt;group&gt;]</code> pyproject section)</li> </ul>"},{"location":"commands/add/#examples","title":"Examples","text":"<p>Install dependency to group:</p> <pre><code>spm add -g docs mkdocs\n</code></pre>"},{"location":"commands/init/","title":"<code>init</code>","text":"<p>Create initial project structure. Files created: <code>pyproject.toml</code>, <code>README.md</code>, <code>.gitignore</code>, <code>src/&lt;NAME&gt;/__init__.py</code></p>"},{"location":"commands/init/#arguments","title":"Arguments","text":"<ul> <li><code>path</code>: Where to place the project (defaults to current path)</li> </ul>"},{"location":"commands/init/#options","title":"Options","text":"<ul> <li><code>--name &lt;NAME&gt;</code>: Project name (defaults to current path basename)</li> <li><code>--description &lt;DESCRIPTION&gt;</code>: Project description</li> <li><code>-t</code>, <code>--type</code>: Project type, can be either lib, app or script (defaults to lib)</li> <li><code>-T</code>,<code>--template</code>: Path to a copier template, can be a local path or an URL (defaults to gh:Jahn16/pspm-template)</li> </ul>"},{"location":"commands/init/#examples","title":"Examples","text":"<p>Initialize project in the current directory:</p> <pre><code>~/codes/banana\n\nspm init # Project name will be set to banana\n</code></pre> <p>Initialize project to another directory:</p> <pre><code>~/codes\n\nspm init apple # Creates directory apple and sets the project name to apple\n</code></pre>"},{"location":"commands/lock/","title":"<code>lock</code>","text":"<p>Lock dependencies but without installing them</p>"},{"location":"commands/lock/#options","title":"Options","text":"<ul> <li><code>--update</code>: Updates dependencies to latest version</li> </ul>"},{"location":"commands/remove/","title":"<code>remove</code>","text":"<p>Remove package from pyproject, uninstalls and removes it from lock files.</p>"},{"location":"commands/remove/#arguments","title":"Arguments","text":"<ul> <li><code>package</code>: Package to uninstall</li> </ul>"},{"location":"commands/remove/#options","title":"Options","text":"<ul> <li><code>-g</code>,<code>--group</code>: The group that the dependency was originally inserted to</li> </ul>"},{"location":"commands/run/","title":"<code>run</code>","text":"<p>Runs a command installed in the project's virtual env. This command loads env variables from a <code>.env</code> file</p> <p>Note</p> <p>This command searches for executables in the <code>.venv/bin</code> directory</p>"},{"location":"commands/run/#arguments","title":"Arguments","text":"<ul> <li><code>command</code>: Command to execute</li> <li><code>arguments</code>: Arguments to pass to command</li> </ul>"},{"location":"commands/run/#examples","title":"Examples","text":"<p>Run an executable installed inside the virtual env:</p> <pre><code>rye run ruff format src/\n</code></pre>"},{"location":"commands/sync/","title":"<code>sync</code>","text":"<p>Warning</p> <p>This command will uninstall all dependencies not specified in the pyproject.toml file</p> <p>Syncronizes virtual environment with all dependencies from the lockfiles and the package itself</p>"},{"location":"commands/upgrade/","title":"<code>upgrade</code>","text":"<p>Locks dependencies to their latest version and installs</p>"},{"location":"commands/version/","title":"<code>version</code>","text":"<p>Get or set project version</p>"},{"location":"commands/version/#arguments","title":"Arguments","text":"<ul> <li><code>version</code>: Version to change to</li> </ul>"},{"location":"commands/version/#options","title":"Options","text":"<ul> <li><code>-b, --bump &lt;RULE&gt;</code>: Bump rule to apply when changing version (<code>major</code>, <code>minor</code> or <code>patch</code>)</li> </ul>"},{"location":"commands/version/#examples","title":"Examples","text":"<p>Get the current version:</p> <pre><code>spm version\n0.1.0\n</code></pre> <p>Bump the version by minor:</p> <pre><code>spm version -b minor\n0.2.0\n</code></pre> <p>Set to a specific version:</p> <pre><code>spm version 1.0.0\n1.0.0\n</code></pre>"}]}